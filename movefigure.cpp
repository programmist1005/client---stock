#include "movefigure.h"
#include <QDebug>
#include <QFile>
#include <QTextStream>
#include <QByteArray>

//--------------------------------------------------------------------------------------------------------------------------------------------------------------
int player = 0;
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
//int port;
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
int check = 0;      // мат
// 0 - нет мата
// 1 - мат
int WhiteKingPos = 60;       // текущая позиция белого короля
int BlackKingPos = 4;       // текущая позиция черного короля
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
int takePawnSourse = 0;     // пешка, взятая на проходе ( 0 - 63)
bool takePawn = false;      // взятие пешки на проходе
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
QString lastMoveFigure;     // имя фигуры сделавшей последний ход
int lastDI;
int lastDJ;     // от куда был сделан последний ход
int lastTI;
int lastTJ;     // куда был сделан последний ход
int lastTN;     // номер, куда был сделан последний ход ( 0 - 63)
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
QString newFigure;      // какую фигуру выбрали взамен пешки на последней горизонтали ( qrc:/... )
int replaceFigure;      // передаваемое значение в QML для проверки и вызова окна с фигурами определенного цвета взамен пешки ( 1 - 2 )
// 1 - белая пешка на последней горизонтали, вызываем окно с белыми фигурами
// 2 - черная пешка на последней горизонтали, вызываем окно с черными фигурами
bool newWhite = false;      // достигла ли белая пешка крайней горизонтали
bool newBlack = false;      // достигла ли черная пешка крайней горизонтали
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
int value ;     // возвращаемое значение в QML функцией move, координата, куда перемещаем фигуру
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
int type;       // клетка, на которую планируем переместить выбранную фигуру
// 0 - пустая клетка
// 1 - белая фигура
// 2 - черная фигура
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
QList <QVariant> moveBoard;     // положение фигур, обновляется после каждого хода, в виде списка
int gameBoard[8][8];            // положение фигур, переведенное в двумерный массив, для удобства анализа
// 0 - клетка пуста
// 1 - есть фигура
// 2 - король
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
QList <QVariant> moveBoardHistory;      // положение фигур, обновляется после каждого хода, в виде списка
QString histotyBoardWrite[64];      // записываем положение фигур на доске в файл
QString histotyBoardRead[64];       // читаем положение фигур на доске с файла
QString boardHistory[8][8];     // положение фигур на доске, записано в двумерный массив, которое передается в QML
QString playerStr[2];       // чей ход, после загрузки продолжения игры
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool white = true;          // ходят белые первыми
bool black = false;         // черные ходят вторыми
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
int moveWhite = 2;       // проверка, какой ход был сделан белой фигурой
int moveBlack = 2;       // проверка, какой ход был сделан черной фигурой
// 0 - НЕ допустимый ход
// 1 - допустимый ход
// 2 - буферная переменная, для передачи ходa от одного игрока другому
// 3 - король сделал короткую рокировку
// 4 - ладья сделала рокировку
// 5 - королевская ладья должна сделать рокировку
// 6 - король сделал длинну рокировку
// 7 - ферзевая ладья должна сделать рокировку
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool moveWhiteKingFirst = false;        // ходил ли белый король
bool moveBlackKingFirst = false;        // ходил ли черный король
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool moveWhiteRookQueenFirst = false;       // ходила ли белая ферзевая ладья, длинная рокировка
bool moveWhiteRookKingFirst = false;        // ходила ли белая королевская ладья, короткая рокировка
//--------------------------------------------------------------------------------------------------------------------------------------------------------------
bool moveBlackRookQueenFirst = false;       // ходила ли черная ферзевая ладья, длинная рокировка
bool moveBlackRookKingFirst = false;        // ходила ли черная королевская ладья, короткая рокировка
//--------------------------------------------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
MoveFigure::MoveFigure(QObject *parent) : QObject(parent)
{

}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void MoveFigure::game( int plr )
{
    player = plr;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
int MoveFigure::gamePlayer()
{
    return player;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
/*
void MoveFigure::sendPortNumber(int prt)
{
    qDebug()<<"вызвал";
    port = prt;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
int MoveFigure::portNumber()
{
    qDebug()<<port;
    return port;
}
*/
//----------------------------------------------------------------------------------------------------------------// основная функция перемещения фигуры------------------------------------------------------
int MoveFigure::move( QString ds, int dn, int di, int dj, QString ts,int tn, int ti, int tj )
{
    //проверка, куда перемещаем фигуру.

    //------------------------------------------------------------------------------------------------------------// 0-пустая клетка
    if(ts == None_figure){
        type = 0;
    }
    //------------------------------------------------------------------------------------------------------------

    //------------------------------------------------------------------------------------------------------------// 1-белая фигура
    if(ts == White_pawn){
        type = 1;
    }
    if(ts == White_rook){
        type = 1;
    }
    if(ts == White_knight){
        type = 1;
    }
    if(ts == White_bishop){
        type = 1;
    }
    if(ts == White_queen){
        type = 1;
    }
    if(ts == White_king){
        type = 1;
    }
    //------------------------------------------------------------------------------------------------------------

    //------------------------------------------------------------------------------------------------------------// 2-черная фигура
    if(ts == Black_pawn){
        type = 2;
    }
    if(ts == Black_rook){
        type = 2;
    }
    if(ts == Black_knight){
        type = 2;
    }
    if(ts == Black_bishop){
        type = 2;
    }
    if(ts == Black_queen){
        type = 2;
    }
    if(ts == Black_king){
        type = 2;
    }
    //------------------------------------------------------------------------------------------------------------

    //проверка, какую фигуру перемещаем

    //------------------------------------------------------------------------------------------------------------// белые фигуры
    if(((ds == White_pawn) && (white == true)) && (type == 0)) {
        moveWhitePawn( dn, di, dj, tn, ti, tj );
    }if((ds == White_pawn) && ((white == false) || (type == 1))) {
        value = dn;
    }if(((ds == White_pawn) && (white == true)) && (type == 2)) {
        moveWhitePawnAttack( dn, di, dj, tn, ti, tj );
    }
    //-------------------------------------------------------------------------------
    if(((ds == White_rook) && (white == true)) && (type == 0 || type == 2)){
        moveWhiteRook( dn, di, dj, tn, ti, tj );
    }if((ds == White_rook) && ((white == false) || (type == 1))) {
        value = dn;
    }if(((ds == White_rook) && (white == false)) && (type == 0)){
        castlingWhite( dn, di, dj, tn, ti, tj );
    }
    //-------------------------------------------------------------------------------
    if(((ds == White_knight) && (white == true)) && (type == 0 || type == 2)){
        moveWhiteKnight( dn, di, dj, tn, ti, tj);
    }if((ds == White_knight) && ((white == false) || (type == 1))) {
        value = dn;
    }
    //-------------------------------------------------------------------------------
    if(((ds == White_bishop) && (white == true)) && (type == 0 || type == 2)){
        moveWhiteBishop( dn, di, dj, tn, ti, tj );
    }if((ds == White_bishop) && ((white == false) || (type == 1))) {
        value = dn;
    }
    //-------------------------------------------------------------------------------
    if(((ds == White_queen) && (white == true)) && (type == 0 || type == 2)){
        moveWhiteQueen( dn, di, dj, tn, ti, tj );
    }if((ds == White_queen) && ((white == false) || (type == 1))) {
        value = dn;
    }
    //-------------------------------------------------------------------------------
    if(((ds == White_king) && (white == true)) && (type == 0 || type == 2 )){
        moveWhiteKing( dn, di, dj, tn, ti, tj );
    }if((ds == White_king) && ((white == false) || (type == 1))) {
        value = dn;
    }
    //------------------------------------------------------------------------------------------------------------

    //------------------------------------------------------------------------------------------------------------// черные фигуры
    if(((ds == Black_pawn) && (black == true)) && (type == 0)) {
        moveBlackPawn( dn, di, dj, tn, ti, tj );
    }if((ds == Black_pawn) && ((black == false) || (type == 2))) {
        value = dn;
    }if(((ds == Black_pawn) && (black == true)) && (type == 1)) {
        moveBlackPawnAttack( dn, di, dj, tn, ti, tj );
    }
    //-------------------------------------------------------------------------------
    if(((ds == Black_rook) && (black == true)) && (type == 0 || type == 1)){
        moveBlackRook( dn, di, dj, tn, ti, tj );
    }if((ds == Black_rook) && ((black == false) || (type == 2))) {
        value = dn;
    }if(((ds == Black_rook) && (black == false)) && (type == 0)){
        castlingBlack( dn, di, dj, tn, ti, tj );
    }
    //-------------------------------------------------------------------------------
    if(((ds == Black_knight) && (black == true)) && (type == 0 || type == 1)){
        moveBlackKnight( dn, di, dj, tn, ti, tj );
    }if((ds == Black_knight) && ((black == false) || (type == 2))) {
        value = dn;
    }
    //-------------------------------------------------------------------------------
    if(((ds == Black_bishop) && (black == true)) && (type == 0 || type == 1)){
        moveBlackBishop( dn, di, dj, tn, ti, tj );
    }if((ds == Black_bishop) && ((black == false) || (type == 2))) {
        value = dn;
    }
    //-------------------------------------------------------------------------------
    if(((ds == Black_queen) && (black == true)) && (type == 0 || type == 1)){
        moveBlackQueen( dn, di, dj, tn, ti, tj );
    }if((ds == Black_queen) && ((black == false) || (type == 2))) {
        value = dn;
    }
    //-------------------------------------------------------------------------------
    if(((ds == Black_king) && (black == true)) && (type == 0 || type == 1)){
        moveBlackKing( dn, di, dj, tn, ti, tj );
    }if((ds == Black_king) && ((black == false) || (type == 2))) {
        value = dn;
    }
    //------------------------------------------------------------------------------------------------------------// записываем последний ход
    if ( moveWhite == 1 || moveBlack == 1 ){
        lastMoveFigure = ds;
        lastDI = di;
        lastDJ = dj;
        lastTI = ti;
        lastTJ = tj;
        lastTN = tn;
    }
    //------------------------------------------------------------------------------------------------------------

    //------------------------------------------------------------------------------------------------------------// вызываем функцию проверки мата
    checkmate();
    //------------------------------------------------------------------------------------------------------------

    return value;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// получаем положение всех фигур, для проверки ходов----------------------------------------
void MoveFigure::typeFigure( QVariantList s )
{
    if(s.size()){
        moveBoard = s[0].toList();

        for (int i = 0; i<8; ++i){
            for (int j = 0; j<8; ++j){
                if( moveBoard[8*i+j] == White_king || moveBoard[8*i+j] == Black_king ){
                    gameBoard[i][j] = 2;                                                                                        // 2 - король
                }
                else if( (moveBoard[8*i+j] != "") && (moveBoard[8*i+j] != White_king) && (moveBoard[8*i+j] != Black_king) ){
                    gameBoard[i][j] = 1;                                                                                        // 1 - есть фигур
                }
                else if( moveBoard[8*i+j] == "" ){
                    gameBoard[i][j] = 0;                                                                                        // 0 - клетка пуста
                }
            }
        }
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// получаем положение всех фигур, для истории-----------------------------------------------
void MoveFigure::typeFigureHistory(QVariantList s)
{
    if(s.size()){
        moveBoardHistory = s[0].toList();

        for ( int k = 0; k<64; ++k) {
            if( moveBoardHistory[k] == Black_rook ){
                histotyBoardWrite[k] = Black_rook;
            }
            else if( moveBoardHistory[k] == Black_knight ){
                histotyBoardWrite[k] = Black_knight;
            }
            else if( moveBoardHistory[k] == Black_bishop ){
                histotyBoardWrite[k] = Black_bishop;
            }
            else if( moveBoardHistory[k] == Black_queen ){
                histotyBoardWrite[k] = Black_queen;
            }
            else if( moveBoardHistory[k] == Black_king ){
                histotyBoardWrite[k] = Black_king;
            }
            else if( moveBoardHistory[k] == Black_pawn ){
                histotyBoardWrite[k] = Black_pawn;
            }
            else if( moveBoardHistory[k] == None_figure ){
                histotyBoardWrite[k] = None_figure;
            }
            else if( moveBoardHistory[k] == White_rook ){
                histotyBoardWrite[k] = White_rook;
            }
            else if( moveBoardHistory[k] == White_knight ){
                histotyBoardWrite[k] = White_knight;;
            }
            else if( moveBoardHistory[k] == White_bishop ){
                histotyBoardWrite[k] = White_bishop;
            }
            else if( moveBoardHistory[k] == White_queen ){
                histotyBoardWrite[k] = White_queen;
            }
            else if( moveBoardHistory[k] == White_king ){
                histotyBoardWrite[k] = White_king;
            }
            else if( moveBoardHistory[k] == White_pawn ){
                histotyBoardWrite[k] = White_pawn;
            }
        }
    }
    historyWrite();                     // вызывем функцию записи в файл положения фигур
    playerWrite();                      // вызывем функцию записи в файл очереди хода игроков
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------// история запись в файл-------------------------------------------------------------------------------------------------
void MoveFigure::historyWrite()
{
    QFile history("../client/history.txt");

    if ( !history.open(QFile::WriteOnly | QFile::Text) ) {
        qDebug()<<"ERROR \n";
    }
    QTextStream out(&history);

    for (int i = 0; i < 64; ++i) {
        out << histotyBoardWrite[i]<<"\n";
    }
    history.flush();
    history.close();
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------// игрок запись в файл хода----------------------------------------------------------------------------------------------
void MoveFigure::playerWrite()
{
    QFile player("../client/player.txt");

    if ( !player.open(QFile::WriteOnly | QFile::Text) ) {
        qDebug()<<"ERROR \n";
    }
    QTextStream out(&player);

    out <<white<<"\n";
    out <<black<<"\n";

    player.flush();
    player.close();
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------// история чтение из файла-----------------------------------------------------------------------------------------------
void MoveFigure::historyRead()
{
    QFile history("../client/history.txt");

    if ( !history.open(QFile::ReadOnly | QFile::Text) ) {
        qDebug()<<"ERROR \n";
    }
    QTextStream in(&history);

    for (int k = 0; k < 64; ++k) {
        histotyBoardRead[k]= history.readLine();
    }
    history.flush();
    history.close();
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------// игрок чтение из файла хода--------------------------------------------------------------------------------------------
void MoveFigure::playerRead()
{
    QFile player("../client/player.txt");

    if ( !player.open(QFile::ReadOnly | QFile::Text) ) {
        qDebug()<<"ERROR \n";
    }
    QTextStream in(&player);

    for (int k = 0; k < 2; ++k) {
        playerStr[k]= player.readLine();
    }

    player.flush();
    player.close();
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------// передача истории в QML------------------------------------------------------------------------------------------------
QString MoveFigure::getFigureHistory(int k, int l)
{
    historyRead();

    for (int i = 0; i<8; ++i) {                                                     // определяем фигуры и переводим данные в двумерный массив доски
        for (int j = 0; j<8; ++j){
            if( histotyBoardRead[8*i+j] == "qrc:/res/img/black_rook.png\n" ){
                boardHistory[i][j] = Black_rook;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/black_knight.png\n" ){
                boardHistory[i][j] = Black_knight;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/black_bishop.png\n" ){
                boardHistory[i][j] = Black_bishop;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/black_queen.png\n" ){
                boardHistory[i][j] = Black_queen;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/black_king.png\n" ){
                boardHistory[i][j] = Black_king;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/black_pawn.png\n" ){
                boardHistory[i][j] = Black_pawn;
            }
            else if( histotyBoardRead[8*i+j] == "\n" ){
                boardHistory[i][j] = None_figure;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/white_rook.png\n" ){
                boardHistory[i][j] = White_rook;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/white_knight.png\n" ){
                boardHistory[i][j] = White_knight;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/white_bishop.png\n" ){
                boardHistory[i][j] = White_bishop;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/white_queen.png\n" ){
                boardHistory[i][j] = White_queen;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/white_king.png\n" ){
                boardHistory[i][j] = White_king;
            }
            else if( histotyBoardRead[8*i+j] == "qrc:/res/img/white_pawn.png\n" ){
                boardHistory[i][j] = White_pawn;
            }
        }
    }
    return boardHistory[k][l];
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------// передача хода в QML---------------------------------------------------------------------------------------------------
void MoveFigure::playerMove()
{
    playerRead();

    if( playerStr[0] == "0\n" ) {
        white = true;
        black = false;
    }
    else if( playerStr[0] == "1\n" ){
        white = false;
        black = true;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------// смена хода фигур------------------------------------------------------------------------------------------------------
void MoveFigure::change()
{
    //-------------------------------------------------------------------------------// белые сделали допустимый ход, право хода перешло к черным
    if(white == true && black == false && moveWhite == 1){
        white = false;
        black = true;
        moveWhite = 2;
    }
    //-------------------------------------------------------------------------------// белые сделали попытку НЕ допустимого хода, ожидание хода белых
    if(white == true && black == false && moveWhite == 0){
        white = true;
        black = false;
        moveWhite = 2;
    }
    //-------------------------------------------------------------------------------// белый король сделал короткую рокировку, нужно сделать ход королевской ладьей
    if(white == true && black == false && moveWhite == 3){
        white = false;
        black = false;
        moveWhite = 5;
    }
    //-------------------------------------------------------------------------------// белый король сделал длинную рокировку, нужно сделать ход ферзевой ладьей
    if(white == true && black == false && moveWhite == 6){
        white = false;
        black = false;
        moveWhite = 7;
    }
    //-------------------------------------------------------------------------------// белая ладья сделала рокировку, ход перешел к черным
    if(white == false && black == false && moveWhite == 4){
        white = false;
        black = true;
        moveWhite = 2;
    }
    //-------------------------------------------------------------------------------


    //-------------------------------------------------------------------------------// черные сделали допустимый ход, право хода перешло к белым
    if(black == true && white == false && moveBlack == 1){
        black = false;
        white = true;
        moveBlack = 2;
    }
    //-------------------------------------------------------------------------------// черные сделали попытку НЕ допустимого хода, ожидание хода черных
    if(black == true && white == false && moveBlack == 0){
        black = true;
        white = false;
        moveBlack = 2;
    }
    //-------------------------------------------------------------------------------// черный король сделал короткую рокировку, нужно сделать ход королевской ладьей
    if(black == true && white == false && moveBlack == 3){
        black = false;
        white = false;
        moveBlack = 5;
    }
    //-------------------------------------------------------------------------------// черный король сделал длинную рокировку, нужно сделать ход ферзевой ладьей
    if(black == true && white == false && moveBlack == 6){
        black = false;
        white = false;
        moveBlack = 7;
    }
    //-------------------------------------------------------------------------------// черная ладья сделала рокировку, ход перешел к белым
    if(black == false && white == false &&  moveBlack == 4){
        black = false;
        white = true;
        moveBlack = 2;
    }
    //-------------------------------------------------------------------------------// обнуляем переменную для вятия пешки на проходе
    takePawnSourse = 0;
    //-------------------------------------------------------------------------------// обнуляем переменную для замены пешки, достигшей последней горизонтали
    replaceFigure = 0;
    //-------------------------------------------------------------------------------
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//-----------------------------------------------------------------------------------// блок хода после мата--------------------------------------------------------------------------------------------------
void MoveFigure::block()
{
    white = false;
    black = false;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// мат--------------------------------------------------------------------------------------
int MoveFigure::checkmate()
{
    if(     ((value == WhiteKingPos) && (lastMoveFigure != White_king) && (black == true && white == false && moveBlack == 1)) ||
            ((value == BlackKingPos) && (lastMoveFigure != Black_king) && (white == true && black == false && moveWhite == 1)) ){
        check = 1;
    }else {
        check = 0;
    }
    return check;;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// вызываем окно для выбора новой фигуры на последней горизонтали---------------------------
int MoveFigure::replace()
{
    if ( newWhite == true ){                    // вызываем окно с белыми фигурами
        replaceFigure = 1;
        newWhite = false;
    }
    else if ( newBlack == true ){               // вызываем окно с черными фигурами
        replaceFigure = 2;
        newBlack = false;
    }
    return replaceFigure;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// получаем новую фигуру с QML--------------------------------------------------------------
void MoveFigure::selectFigure( QString qrcNewFigure )
{
    newFigure = qrcNewFigure;                                  // qrc:/... новой фигуры
    replacePawn();
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// замена пешки на крайней горизонтали------------------------------------------------------
QString MoveFigure::replacePawn()
{
    return newFigure;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// взятие пешки на проходе------------------------------------------------------------------
int MoveFigure::take()
{
    if ( takePawn == true){
        takePawnSourse = lastTN;
        takePawn = false;;
    }
    return takePawnSourse;
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// рокировка белых--------------------------------------------------------------------------
void MoveFigure::castlingWhite( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     ((ti == di)   &&  (tj == dj-2) && (dn ==63 ) && (moveWhite == 5))  ) {           // короткая рокировка
        value = tn;
        moveWhite = 4;
        moveWhiteRookKingFirst = true;
    }
    else if(     ((ti == di)   &&  (tj == dj+3) && (dn ==56 ) && (moveWhite == 7))  ) {       // длинная рокировка
        value = tn;
        moveWhite = 4;
        moveWhiteRookKingFirst = true;
    }
    else {
        value = dn;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход белой пешкой-------------------------------------------------------------------------
void MoveFigure::moveWhitePawn( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     (ti == di-1 && tj == dj) ||
            ((ti == di-2) && (tj == dj) && (di == 6) && (gameBoard[di-1][dj] == 0))) {       // первый ход может быть на две клетки
        value = tn;
        if ( ti == 0){
            newWhite = true;                                // пешка на последней горизонтали
            replace();
        }
        moveWhite = 1;
    }
    else if( (di == 3) && (ti == di-1 && tj == dj+1) && (moveBoard[8*di+(dj+1)] == Black_pawn) &&                                       // взятие пешки на проходе
             ((lastMoveFigure == Black_pawn) && (lastDI ==1) && (lastDJ == dj+1) && (lastTI == 3) && (lastTJ == dj+1)) ){
        takePawn = true;
        take();
        value = tn ;
        moveWhite = 1;
    }
    else if( (di == 3) && (ti == di-1 && tj == dj-1) && (moveBoard[8*di+(dj-1)] == Black_pawn) &&                                       // взятие пешки на проходе
             ((lastMoveFigure == Black_pawn) && (lastDI ==1) && (lastDJ == dj-1) && (lastTI == 3) && (lastTJ == dj-1)) ){
        takePawn = true;
        take();
        value = tn ;
        moveWhite = 1;
    }
    else {
        value = dn;
        moveWhite = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// атака белой пешкой-----------------------------------------------------------------------
void MoveFigure::moveWhitePawnAttack( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     (ti == di-1 && tj == dj-1) ||
            (ti == di-1 && tj == dj+1) ) {
        value = tn;
        if ( ti == 0){
            newWhite = true;                                // пешка на последней горизонтали
            replace();
        }
        moveWhite = 1;
    }else {
        value = dn;
        moveWhite = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход белым королем------------------------------------------------------------------------
void MoveFigure::moveWhiteKing( int dn, int di, int dj, int tn, int ti, int tj )
{
    if( (ti == di) && (tj == dj+2) && (gameBoard[di][dj+1] == 0) && (gameBoard[di][dj+2] == 0) && (moveWhiteKingFirst == false) && (moveWhiteRookKingFirst == false) )
    {
        value = tn;                                                                                                 // короткая покировка
        WhiteKingPos = tn;                                                                                          // записываем новую позицию короля
        moveWhite = 3;
        moveWhiteKingFirst = true;
    }
    else if( (ti == di) && (tj == dj-2) && (gameBoard[di][dj-1] == 0) && (gameBoard[di][dj-2] == 0) && (gameBoard[di][dj-3] == 0) && (moveWhiteKingFirst == false) && (moveWhiteRookQueenFirst == false) )
    {
        value = tn;                                                                                                 // длинная рокировка
        WhiteKingPos = tn;                                                                                          // записываем новую позицию короля
        moveWhite = 6;
        moveWhiteKingFirst = true;
    }
    else if(     (((ti == di-1 && tj == dj))   && ( (gameBoard[di-2][dj] != 2)   && (gameBoard[di-2][dj-1] != 2) && (gameBoard[di-2][dj+1] != 2) )) ||
                 (((ti == di+1 && tj == dj))   && ( (gameBoard[di+2][dj] != 2)   && (gameBoard[di+2][dj-1] != 2) && (gameBoard[di+2][dj+1] != 2) )) ||
                 (((ti == di   && tj == dj-1)) && ( (gameBoard[di][dj-2] != 2)   && (gameBoard[di-1][dj-2] != 2) && (gameBoard[di+1][dj-2] != 2) )) ||
                 (((ti == di   && tj == dj+1)) && ( (gameBoard[di][dj+2] != 2)   && (gameBoard[di-1][dj+2] != 2) && (gameBoard[di+1][dj+2] != 2) )) ||
                 (((ti == di-1 && tj == dj-1)) && ( (gameBoard[di-2][dj-2] != 2) && (gameBoard[di-2][dj-1] != 2) && (gameBoard[di-2][dj] != 2) && (gameBoard[di-1][dj-2] != 2) && (gameBoard[di][dj-2] != 2) )) ||
                 (((ti == di+1 && tj == dj+1)) && ( (gameBoard[di+2][dj+2] != 2) && (gameBoard[di+2][dj+1] != 2) && (gameBoard[di+2][dj] != 2) && (gameBoard[di+1][dj+2] != 2) && (gameBoard[di][dj+2] != 2) )) ||
                 (((ti == di-1 && tj == dj+1)) && ( (gameBoard[di-2][dj+2] != 2) && (gameBoard[di-2][dj+1] != 2) && (gameBoard[di-2][dj] != 2) && (gameBoard[di-1][dj+2] != 2) && (gameBoard[di][dj+2] != 2) )) ||
                 (((ti == di+1 && tj == dj-1)) && ( (gameBoard[di+2][dj-2] != 2) && (gameBoard[di+2][dj-1] != 2) && (gameBoard[di+2][dj] != 2) && (gameBoard[di+1][dj-2] != 2) && (gameBoard[di][dj-2] != 2) )) )
    {
        value = tn;
        WhiteKingPos = tn;                                                                                          // записываем новую позицию короля
        moveWhite = 1;
        moveWhiteKingFirst = true;                                                                                  // рокировка далее запрещена, король сделал ход
    }else {
        value = dn;
        moveWhite = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход белым конем--------------------------------------------------------------------------
void MoveFigure::moveWhiteKnight( int dn, int di, int dj, int tn, int ti, int tj)
{
    if(     (ti == di-2 && tj == dj-1) ||
            (ti == di-2 && tj == dj+1) ||
            (ti == di-1 && tj == dj-2) ||
            (ti == di-1 && tj == dj+2) ||
            (ti == di+2 && tj == dj-1) ||
            (ti == di+2 && tj == dj+1) ||
            (ti == di+1 && tj == dj-2) ||
            (ti == di+1 && tj == dj+2)) {
        value = tn;
        moveWhite = 1;
    }else {
        value = dn;
        moveWhite = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход белой ладьей-------------------------------------------------------------------------
void MoveFigure::moveWhiteRook( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     (ti == di   &&  (tj == dj+1 ||
                             (tj == dj+2 && gameBoard[di][dj+1] == 0)||
                             (tj == dj+3 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0)||
                             (tj == dj+4 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0)||
                             (tj == dj+5 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0)||
                             (tj == dj+6 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0 && gameBoard[di][dj+5] == 0)||
                             (tj == dj+7 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0 && gameBoard[di][dj+5] == 0 && gameBoard[di][dj+6] == 0))) ||
            (ti == di   &&  (tj == dj-1 ||
                             (tj == dj-2 && gameBoard[di][dj-1] == 0)||
                             (tj == dj-3 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0)||
                             (tj == dj-4 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0)||
                             (tj == dj-5 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0)||
                             (tj == dj-6 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0 && gameBoard[di][dj-5] == 0)||
                             (tj == dj-7 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0 && gameBoard[di][dj-5] == 0 && gameBoard[di][dj-6] == 0))) ||
            (tj == dj   &&  (ti == di+1 ||
                             (ti == di+2 && gameBoard[di+1][dj] == 0)||
                             (ti == di+3 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0)||
                             (ti == di+4 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0)||
                             (ti == di+5 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0)||
                             (ti == di+6 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0 && gameBoard[di+5][dj] == 0)||
                             (ti == di+7 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0 && gameBoard[di+5][dj] == 0 && gameBoard[di+6][dj] == 0))) ||
            (tj == dj   &&  (ti == di-1 ||
                             (ti == di-2 && gameBoard[di-1][dj] == 0)||
                             (ti == di-3 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0)||
                             (ti == di-4 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0)||
                             (ti == di-5 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0)||
                             (ti == di-6 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0 && gameBoard[di-5][dj] == 0)||
                             (ti == di-7 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0 && gameBoard[di-5][dj] == 0 && gameBoard[di-6][dj] == 0))) )
    {
        value = tn;
        moveWhite = 1;
        if(dn == 63){
            moveWhiteRookKingFirst = true;                                                              // короткая рокировка далее запрещена
        }
        if(dn == 56){
            moveWhiteRookQueenFirst = true;                                                             // длинная рокировка далее запрещена
        }

    }else {
        value = dn;
        moveWhite = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход белым слоном-------------------------------------------------------------------------
void MoveFigure::moveWhiteBishop( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(
            (ti == di+1 && tj == dj+1)||
            (ti == di+2 && tj == dj+2 && gameBoard[di+1][dj+1] == 0)||
            (ti == di+3 && tj == dj+3 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0)||
            (ti == di+4 && tj == dj+4 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0)||
            (ti == di+5 && tj == dj+5 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0)||
            (ti == di+6 && tj == dj+6 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0 && gameBoard[di+5][dj+5] == 0)||
            (ti == di+7 && tj == dj+7 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0 && gameBoard[di+5][dj+5] == 0 && gameBoard[di+6][dj+6] == 0) ||

            (ti == di-1 && tj == dj-1)||
            (ti == di-2 && tj == dj-2 && gameBoard[di-1][dj-1] == 0)||
            (ti == di-3 && tj == dj-3 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0)||
            (ti == di-4 && tj == dj-4 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0)||
            (ti == di-5 && tj == dj-5 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0)||
            (ti == di-6 && tj == dj-6 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0 && gameBoard[di-5][dj-5] == 0)||
            (ti == di-7 && tj == dj-7 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0 && gameBoard[di-5][dj-5] == 0 && gameBoard[di-6][dj-6] == 0) ||

            (ti == di-1 && tj == dj+1)||
            (ti == di-2 && tj == dj+2 && gameBoard[di-1][dj+1] == 0)||
            (ti == di-3 && tj == dj+3 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0)||
            (ti == di-4 && tj == dj+4 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0)||
            (ti == di-5 && tj == dj+5 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0)||
            (ti == di-6 && tj == dj+6 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0 && gameBoard[di-5][dj+5] == 0)||
            (ti == di-7 && tj == dj+7 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0 && gameBoard[di-5][dj+5] == 0 && gameBoard[di-6][dj+6] == 0) ||

            (ti == di+1 && tj == dj-1)||
            (ti == di+2 && tj == dj-2 && gameBoard[di+1][dj-1] == 0)||
            (ti == di+3 && tj == dj-3 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0)||
            (ti == di+4 && tj == dj-4 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0)||
            (ti == di+5 && tj == dj-5 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0)||
            (ti == di+6 && tj == dj-6 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0 && gameBoard[di+5][dj-5] == 0)||
            (ti == di+7 && tj == dj-7 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0 && gameBoard[di+5][dj-5] == 0 && gameBoard[di+6][dj-6] == 0) )
    {
        value = tn;
        moveWhite = 1;
    }else {
        value = dn;
        moveWhite = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход белым ферзем-------------------------------------------------------------------------
void MoveFigure::moveWhiteQueen( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     (ti == di+1 && tj == dj+1)||
            (ti == di+2 && tj == dj+2 && gameBoard[di+1][dj+1] == 0)||
            (ti == di+3 && tj == dj+3 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0)||
            (ti == di+4 && tj == dj+4 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0)||
            (ti == di+5 && tj == dj+5 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0)||
            (ti == di+6 && tj == dj+6 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0 && gameBoard[di+5][dj+5] == 0)||
            (ti == di+7 && tj == dj+7 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0 && gameBoard[di+5][dj+5] == 0 && gameBoard[di+6][dj+6] == 0) ||

            (ti == di-1 && tj == dj-1)||
            (ti == di-2 && tj == dj-2 && gameBoard[di-1][dj-1] == 0)||
            (ti == di-3 && tj == dj-3 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0)||
            (ti == di-4 && tj == dj-4 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0)||
            (ti == di-5 && tj == dj-5 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0)||
            (ti == di-6 && tj == dj-6 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0 && gameBoard[di-5][dj-5] == 0)||
            (ti == di-7 && tj == dj-7 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0 && gameBoard[di-5][dj-5] == 0 && gameBoard[di-6][dj-6] == 0) ||

            (ti == di-1 && tj == dj+1)||
            (ti == di-2 && tj == dj+2 && gameBoard[di-1][dj+1] == 0)||
            (ti == di-3 && tj == dj+3 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0)||
            (ti == di-4 && tj == dj+4 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0)||
            (ti == di-5 && tj == dj+5 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0)||
            (ti == di-6 && tj == dj+6 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0 && gameBoard[di-5][dj+5] == 0)||
            (ti == di-7 && tj == dj+7 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0 && gameBoard[di-5][dj+5] == 0 && gameBoard[di-6][dj+6] == 0) ||

            (ti == di+1 && tj == dj-1)||
            (ti == di+2 && tj == dj-2 && gameBoard[di+1][dj-1] == 0)||
            (ti == di+3 && tj == dj-3 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0)||
            (ti == di+4 && tj == dj-4 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0)||
            (ti == di+5 && tj == dj-5 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0)||
            (ti == di+6 && tj == dj-6 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0 && gameBoard[di+5][dj-5] == 0)||
            (ti == di+7 && tj == dj-7 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0 && gameBoard[di+5][dj-5] == 0 && gameBoard[di+6][dj-6] == 0) ||
            (ti == di   &&(tj == dj+1 ||
                           (tj == dj+2 && gameBoard[di][dj+1] == 0)||
                           (tj == dj+3 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0)||
                           (tj == dj+4 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0)||
                           (tj == dj+5 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0)||
                           (tj == dj+6 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0 && gameBoard[di][dj+5] == 0)||
                           (tj == dj+7 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0 && gameBoard[di][dj+5] == 0 && gameBoard[di][dj+6] == 0))) ||
            (ti == di   &&(tj == dj-1 ||
                           (tj == dj-2 && gameBoard[di][dj-1] == 0)||
                           (tj == dj-3 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0)||
                           (tj == dj-4 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0)||
                           (tj == dj-5 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0)||
                           (tj == dj-6 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0 && gameBoard[di][dj-5] == 0)||
                           (tj == dj-7 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0 && gameBoard[di][dj-5] == 0 && gameBoard[di][dj-6] == 0))) ||
            (tj == dj   &&(ti == di+1 ||
                           (ti == di+2 && gameBoard[di+1][dj] == 0)||
                           (ti == di+3 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0)||
                           (ti == di+4 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0)||
                           (ti == di+5 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0)||
                           (ti == di+6 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0 && gameBoard[di+5][dj] == 0)||
                           (ti == di+7 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0 && gameBoard[di+5][dj] == 0 && gameBoard[di+6][dj] == 0))) ||
            (tj == dj   &&(ti == di-1 ||
                           (ti == di-2 && gameBoard[di-1][dj] == 0)||
                           (ti == di-3 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0)||
                           (ti == di-4 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0)||
                           (ti == di-5 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0)||
                           (ti == di-6 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0 && gameBoard[di-5][dj] == 0)||
                           (ti == di-7 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0 && gameBoard[di-5][dj] == 0 && gameBoard[di-6][dj] == 0))) )
    {
        value = tn;
        moveWhite = 1;
    }else {
        value = dn;
        moveWhite = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// рокировка черных-------------------------------------------------------------------------
void MoveFigure::castlingBlack( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     ((ti == di)   &&  (tj == dj-2) && (dn ==7) && (moveBlack ==5))  ) {          // короткая рокировка
        value = tn;
        moveBlack = 4;
        moveBlackRookKingFirst = true;
    }
    else if(     ((ti == di)   &&  (tj == dj+3) && (dn ==0) && (moveBlack ==7))  ) {     // длинная рокировка
        value = tn;
        moveBlack = 4;
        moveBlackRookKingFirst = true;
    }
    else {
        value = dn;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход черной пешкой------------------------------------------------------------------------
void MoveFigure::moveBlackPawn( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     (ti == di+1 && tj == dj) ||
            ((ti == di+2) && (tj == dj) && (di == 1) && (gameBoard[di+1][dj] == 0))) {       // первый ход может быть на две клетки
        value = tn;
        if ( ti == 7){
            newBlack = true;                                // пешка на последней горизонтали
            replace();
        }
        moveBlack = 1;
    }
    else if( (di == 4) && (ti == di+1 && tj == dj+1) && (moveBoard[8*di+(dj+1)] == White_pawn) &&                                           // взятие пешки на проходе
             ((lastMoveFigure == White_pawn) && (lastDI ==6) && (lastDJ == dj+1) && (lastTI == 4) && (lastTJ == dj+1)) ){
        takePawn = true;
        take();
        value = tn ;
        moveBlack = 1;
    }
    else if( (di == 4) && (ti == di+1 && tj == dj-1) && (moveBoard[8*di+(dj-1)] == White_pawn) &&                                           // взятие пешки на проходе
             ((lastMoveFigure == White_pawn) && (lastDI ==6) && (lastDJ == dj-1) && (lastTI == 4) && (lastTJ == dj-1)) ){
        takePawn = true;
        take();
        value = tn ;
        moveBlack = 1;
    }
    else {
        value = dn;
        moveBlack = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// атака черной пешкой----------------------------------------------------------------------
void MoveFigure::moveBlackPawnAttack( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     (ti == di+1 && tj == dj-1) ||
            (ti == di+1 && tj == dj+1) ) {
        value = tn;
        if ( ti == 7){
            newBlack = true;                                // пешка на последней горизонтали
            replace();
        }
        moveBlack = 1;
    }else {
        value = dn;
        moveBlack = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход черным королем-----------------------------------------------------------------------
void MoveFigure::moveBlackKing( int dn, int di, int dj, int tn, int ti, int tj )
{
    if( (ti == di) && (tj == dj+2) && (gameBoard[di][dj+1] == 0) && (gameBoard[di][dj+2] == 0) && (moveBlackKingFirst == false) && (moveBlackRookKingFirst == false) )
    {
        value = tn;                                                                                                // короткая рокировка
        BlackKingPos = tn;                                                                                         // записываем новую позицию короля
        moveBlack = 3;
        moveBlackKingFirst = true;
    }
    else if( (ti == di) && (tj == dj-2) && (gameBoard[di][dj-1] == 0) && (gameBoard[di][dj-2] == 0) && (gameBoard[di][dj-3] == 0) && (moveBlackKingFirst == false) && (moveBlackRookQueenFirst == false) )
    {
        value = tn;                                                                                                // длинная рокировка
        BlackKingPos = tn;                                                                                         // записываем новую позицию короля
        moveBlack = 6;
        moveBlackKingFirst = true;
    }
    else if(     (((ti == di-1 && tj == dj))   && ( (gameBoard[di-2][dj] != 2)   && (gameBoard[di-2][dj-1] != 2) && (gameBoard[di-2][dj+1] != 2) )) ||
                 (((ti == di+1 && tj == dj))   && ( (gameBoard[di+2][dj] != 2)   && (gameBoard[di+2][dj-1] != 2) && (gameBoard[di+2][dj+1] != 2) )) ||
                 (((ti == di   && tj == dj-1)) && ( (gameBoard[di][dj-2] != 2)   && (gameBoard[di-1][dj-2] != 2) && (gameBoard[di+1][dj-2] != 2) )) ||
                 (((ti == di   && tj == dj+1)) && ( (gameBoard[di][dj+2] != 2)   && (gameBoard[di-1][dj+2] != 2) && (gameBoard[di+1][dj+2] != 2) )) ||
                 (((ti == di-1 && tj == dj-1)) && ( (gameBoard[di-2][dj-2] != 2) && (gameBoard[di-2][dj-1] != 2) && (gameBoard[di-2][dj] != 2) && (gameBoard[di-1][dj-2] != 2) && (gameBoard[di][dj-2] != 2) )) ||
                 (((ti == di+1 && tj == dj+1)) && ( (gameBoard[di+2][dj+2] != 2) && (gameBoard[di+2][dj+1] != 2) && (gameBoard[di+2][dj] != 2) && (gameBoard[di+1][dj+2] != 2) && (gameBoard[di][dj+2] != 2) )) ||
                 (((ti == di-1 && tj == dj+1)) && ( (gameBoard[di-2][dj+2] != 2) && (gameBoard[di-2][dj+1] != 2) && (gameBoard[di-2][dj] != 2) && (gameBoard[di-1][dj+2] != 2) && (gameBoard[di][dj+2] != 2) )) ||
                 (((ti == di+1 && tj == dj-1)) && ( (gameBoard[di+2][dj-2] != 2) && (gameBoard[di+2][dj-1] != 2) && (gameBoard[di+2][dj] != 2) && (gameBoard[di+1][dj-2] != 2) && (gameBoard[di][dj-2] != 2) )) )
    {
        value = tn;
        BlackKingPos = tn;                                                                                         // записываем новую позицию короля
        moveBlack = 1;
        moveBlackKingFirst = true;                                                                                 // рокировка далее запрещена, король сделал ход
    }else {
        value = dn;
        moveBlack = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход черным конем-------------------------------------------------------------------------
void MoveFigure::moveBlackKnight( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     (ti == di-2 && tj == dj-1) ||
            (ti == di-2 && tj == dj+1) ||
            (ti == di-1 && tj == dj-2) ||
            (ti == di-1 && tj == dj+2) ||
            (ti == di+2 && tj == dj-1) ||
            (ti == di+2 && tj == dj+1) ||
            (ti == di+1 && tj == dj-2) ||
            (ti == di+1 && tj == dj+2)) {
        value = tn;
        moveBlack = 1;
    }else {
        value = dn;
        moveBlack = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход черной ладьей------------------------------------------------------------------------
void MoveFigure::moveBlackRook( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     (ti == di   &&  (tj == dj+1 ||
                             (tj == dj+2 && gameBoard[di][dj+1] == 0)||
                             (tj == dj+3 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0)||
                             (tj == dj+4 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0)||
                             (tj == dj+5 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0)||
                             (tj == dj+6 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0 && gameBoard[di][dj+5] == 0)||
                             (tj == dj+7 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0 && gameBoard[di][dj+5] == 0 && gameBoard[di][dj+6] == 0))) ||
            (ti == di   &&  (tj == dj-1 ||
                             (tj == dj-2 && gameBoard[di][dj-1] == 0)||
                             (tj == dj-3 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0)||
                             (tj == dj-4 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0)||
                             (tj == dj-5 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0)||
                             (tj == dj-6 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0 && gameBoard[di][dj-5] == 0)||
                             (tj == dj-7 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0 && gameBoard[di][dj-5] == 0 && gameBoard[di][dj-6] == 0))) ||
            (tj == dj   &&  (ti == di+1 ||
                             (ti == di+2 && gameBoard[di+1][dj] == 0)||
                             (ti == di+3 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0)||
                             (ti == di+4 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0)||
                             (ti == di+5 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0)||
                             (ti == di+6 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0 && gameBoard[di+5][dj] == 0)||
                             (ti == di+7 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0 && gameBoard[di+5][dj] == 0 && gameBoard[di+6][dj] == 0))) ||
            (tj == dj   &&  (ti == di-1 ||
                             (ti == di-2 && gameBoard[di-1][dj] == 0)||
                             (ti == di-3 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0)||
                             (ti == di-4 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0)||
                             (ti == di-5 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0)||
                             (ti == di-6 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0 && gameBoard[di-5][dj] == 0)||
                             (ti == di-7 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0 && gameBoard[di-5][dj] == 0 && gameBoard[di-6][dj] == 0))) )
    {
        value = tn;
        moveBlack = 1;
        if(dn == 7){
            moveBlackRookKingFirst = true;                                                                      // короткая рокировка далее запрещена
        }
        if(dn == 0){
            moveBlackRookQueenFirst = true;                                                                     // длинная рокировка далее запрещена
        }
    }else {
        value = dn;
        moveBlack = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход черным слоном------------------------------------------------------------------------
void MoveFigure::moveBlackBishop( int dn, int di, int dj, int tn, int ti, int tj )
{
    value = tn;
    if(
            (ti == di+1 && tj == dj+1)||
            (ti == di+2 && tj == dj+2 && gameBoard[di+1][dj+1] == 0)||
            (ti == di+3 && tj == dj+3 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0)||
            (ti == di+4 && tj == dj+4 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0)||
            (ti == di+5 && tj == dj+5 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0)||
            (ti == di+6 && tj == dj+6 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0 && gameBoard[di+5][dj+5] == 0)||
            (ti == di+7 && tj == dj+7 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0 && gameBoard[di+5][dj+5] == 0 && gameBoard[di+6][dj+6] == 0) ||

            (ti == di-1 && tj == dj-1)||
            (ti == di-2 && tj == dj-2 && gameBoard[di-1][dj-1] == 0)||
            (ti == di-3 && tj == dj-3 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0)||
            (ti == di-4 && tj == dj-4 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0)||
            (ti == di-5 && tj == dj-5 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0)||
            (ti == di-6 && tj == dj-6 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0 && gameBoard[di-5][dj-5] == 0)||
            (ti == di-7 && tj == dj-7 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0 && gameBoard[di-5][dj-5] == 0 && gameBoard[di-6][dj-6] == 0) ||

            (ti == di-1 && tj == dj+1)||
            (ti == di-2 && tj == dj+2 && gameBoard[di-1][dj+1] == 0)||
            (ti == di-3 && tj == dj+3 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0)||
            (ti == di-4 && tj == dj+4 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0)||
            (ti == di-5 && tj == dj+5 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0)||
            (ti == di-6 && tj == dj+6 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0 && gameBoard[di-5][dj+5] == 0)||
            (ti == di-7 && tj == dj+7 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0 && gameBoard[di-5][dj+5] == 0 && gameBoard[di-6][dj+6] == 0) ||

            (ti == di+1 && tj == dj-1)||
            (ti == di+2 && tj == dj-2 && gameBoard[di+1][dj-1] == 0)||
            (ti == di+3 && tj == dj-3 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0)||
            (ti == di+4 && tj == dj-4 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0)||
            (ti == di+5 && tj == dj-5 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0)||
            (ti == di+6 && tj == dj-6 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0 && gameBoard[di+5][dj-5] == 0)||
            (ti == di+7 && tj == dj-7 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0 && gameBoard[di+5][dj-5] == 0 && gameBoard[di+6][dj-6] == 0) )
    {
        value = tn;
        moveBlack = 1;
    }else {
        value = dn;
        moveBlack = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//----------------------------------------------------------------------------------------------------------------// ход черным ферзем------------------------------------------------------------------------
void MoveFigure::moveBlackQueen( int dn, int di, int dj, int tn, int ti, int tj )
{
    if(     (ti == di+1 && tj == dj+1)||
            (ti == di+2 && tj == dj+2 && gameBoard[di+1][dj+1] == 0)||
            (ti == di+3 && tj == dj+3 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0)||
            (ti == di+4 && tj == dj+4 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0)||
            (ti == di+5 && tj == dj+5 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0)||
            (ti == di+6 && tj == dj+6 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0 && gameBoard[di+5][dj+5] == 0)||
            (ti == di+7 && tj == dj+7 && gameBoard[di+1][dj+1] == 0 && gameBoard[di+2][dj+2] == 0 && gameBoard[di+3][dj+3] == 0 && gameBoard[di+4][dj+4] == 0 && gameBoard[di+5][dj+5] == 0 && gameBoard[di+6][dj+6] == 0) ||

            (ti == di-1 && tj == dj-1)||
            (ti == di-2 && tj == dj-2 && gameBoard[di-1][dj-1] == 0)||
            (ti == di-3 && tj == dj-3 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0)||
            (ti == di-4 && tj == dj-4 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0)||
            (ti == di-5 && tj == dj-5 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0)||
            (ti == di-6 && tj == dj-6 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0 && gameBoard[di-5][dj-5] == 0)||
            (ti == di-7 && tj == dj-7 && gameBoard[di-1][dj-1] == 0 && gameBoard[di-2][dj-2] == 0 && gameBoard[di-3][dj-3] == 0 && gameBoard[di-4][dj-4] == 0 && gameBoard[di-5][dj-5] == 0 && gameBoard[di-6][dj-6] == 0) ||

            (ti == di-1 && tj == dj+1)||
            (ti == di-2 && tj == dj+2 && gameBoard[di-1][dj+1] == 0)||
            (ti == di-3 && tj == dj+3 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0)||
            (ti == di-4 && tj == dj+4 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0)||
            (ti == di-5 && tj == dj+5 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0)||
            (ti == di-6 && tj == dj+6 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0 && gameBoard[di-5][dj+5] == 0)||
            (ti == di-7 && tj == dj+7 && gameBoard[di-1][dj+1] == 0 && gameBoard[di-2][dj+2] == 0 && gameBoard[di-3][dj+3] == 0 && gameBoard[di-4][dj+4] == 0 && gameBoard[di-5][dj+5] == 0 && gameBoard[di-6][dj+6] == 0) ||

            (ti == di+1 && tj == dj-1)||
            (ti == di+2 && tj == dj-2 && gameBoard[di+1][dj-1] == 0)||
            (ti == di+3 && tj == dj-3 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0)||
            (ti == di+4 && tj == dj-4 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0)||
            (ti == di+5 && tj == dj-5 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0)||
            (ti == di+6 && tj == dj-6 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0 && gameBoard[di+5][dj-5] == 0)||
            (ti == di+7 && tj == dj-7 && gameBoard[di+1][dj-1] == 0 && gameBoard[di+2][dj-2] == 0 && gameBoard[di+3][dj-3] == 0 && gameBoard[di+4][dj-4] == 0 && gameBoard[di+5][dj-5] == 0 && gameBoard[di+6][dj-6] == 0) ||
            (ti == di   &&(tj == dj+1 ||
                           (tj == dj+2 && gameBoard[di][dj+1] == 0)||
                           (tj == dj+3 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0)||
                           (tj == dj+4 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0)||
                           (tj == dj+5 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0)||
                           (tj == dj+6 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0 && gameBoard[di][dj+5] == 0)||
                           (tj == dj+7 && gameBoard[di][dj+1] == 0 && gameBoard[di][dj+2] == 0 && gameBoard[di][dj+3] == 0 && gameBoard[di][dj+4] == 0 && gameBoard[di][dj+5] == 0 && gameBoard[di][dj+6] == 0))) ||
            (ti == di   &&(tj == dj-1 ||
                           (tj == dj-2 && gameBoard[di][dj-1] == 0)||
                           (tj == dj-3 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0)||
                           (tj == dj-4 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0)||
                           (tj == dj-5 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0)||
                           (tj == dj-6 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0 && gameBoard[di][dj-5] == 0)||
                           (tj == dj-7 && gameBoard[di][dj-1] == 0 && gameBoard[di][dj-2] == 0 && gameBoard[di][dj-3] == 0 && gameBoard[di][dj-4] == 0 && gameBoard[di][dj-5] == 0 && gameBoard[di][dj-6] == 0))) ||
            (tj == dj   &&(ti == di+1 ||
                           (ti == di+2 && gameBoard[di+1][dj] == 0)||
                           (ti == di+3 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0)||
                           (ti == di+4 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0)||
                           (ti == di+5 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0)||
                           (ti == di+6 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0 && gameBoard[di+5][dj] == 0)||
                           (ti == di+7 && gameBoard[di+1][dj] == 0 && gameBoard[di+2][dj] == 0 && gameBoard[di+3][dj] == 0 && gameBoard[di+4][dj] == 0 && gameBoard[di+5][dj] == 0 && gameBoard[di+6][dj] == 0))) ||
            (tj == dj   &&(ti == di-1 ||
                           (ti == di-2 && gameBoard[di-1][dj] == 0)||
                           (ti == di-3 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0)||
                           (ti == di-4 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0)||
                           (ti == di-5 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0)||
                           (ti == di-6 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0 && gameBoard[di-5][dj] == 0)||
                           (ti == di-7 && gameBoard[di-1][dj] == 0 && gameBoard[di-2][dj] == 0 && gameBoard[di-3][dj] == 0 && gameBoard[di-4][dj] == 0 && gameBoard[di-5][dj] == 0 && gameBoard[di-6][dj] == 0))) )
    {
        value = tn;
        moveBlack = 1;
    }else {
        value = dn;
        moveBlack = 0;
    }
}
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
